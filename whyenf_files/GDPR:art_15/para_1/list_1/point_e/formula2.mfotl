ALWAYS( ( EXISTS a1 .  EXISTS er .  EXISTS edp .  EXISTS x .  EXISTS ea . ((prOnto_PersonalDataProcessing(ep, x, z)) AND ( NOT (rioOnto_exceptionCha3Sec1Art12Par2(ep))) AND ( NOT (rioOnto_exceptionCha2Art11Par2(ep))) AND (dapreco_Request(er, w, ea)) AND (prOnto_nominates(edp, y, x)) AND (prOnto_PersonalData(z, w)) AND (dapreco_AwareOf(ea, w, ep)))) IMPLIES ( EXISTS t2 .  EXISTS a2 .  EXISTS en1 .  EXISTS en2 .  EXISTS ea1 .  EXISTS eac .  EXISTS ea2 .  EXISTS ere .  EXISTS en3 .  EXISTS ea3 .  EXISTS era .  EXISTS en4 .  EXISTS ea4 .  EXISTS eli .  EXISTS en5 .  EXISTS ea5 .  EXISTS eng .  EXISTS a3 .  EXISTS ehc .  EXISTS eau .  EXISTS c .  EXISTS epu .  EVENTUALLY ((prOnto_Communicate(en1, y, w, ea1)) AND (prOnto_Communicate(en2, y, w, ea2)) AND (dapreco_AbleTo(ea1, w, eac)) AND (dapreco_AbleTo(ea2, w, ere)) AND (dapreco_Access(eac, w, z)) AND (dapreco_Rectify(ere, w, z)) AND (rioOnto_Obliged(a2, t2, y)) AND (rioOnto_and(a2, en1, en2, en2, en2, en2)) AND (prOnto_Communicate(en3, y, w, ea3)) AND (dapreco_AbleTo(ea3, w, era)) AND (prOnto_Delete(era, w, z)) AND (prOnto_Communicate(en4, y, w, ea4)) AND (dapreco_AbleTo(ea4, w, eli)) AND (dapreco_Limit(eli, w, z)) AND (prOnto_Communicate(en5, y, w, ea5)) AND (dapreco_AbleTo(ea5, w, eng)) AND (rioOnto_not(eng, a3)) AND (rioOnto_and(a3, ehc, eau)) AND (prOnto_Consent(c, ep)) AND (dapreco_GiveConsent(ehc, w, c, ep)) AND (dapreco_AuthorizedBy(eau, epu, c, ep)))))